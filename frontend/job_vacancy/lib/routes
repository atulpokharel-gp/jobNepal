import 'package:go_router/go_router.dart';
class RouterGo{


Future void main() async {
  final bool islogged = await SharedService.isLoggedin()
  final GoRouter _router = GoRouter(
      initialLocation: '/',
      redirect: (state){
        if (islogged){
          
        }
      }
      routes: <GoRoute>[
        GoRoute(
          name: "splash",
          path: '/',
          builder: (BuildContext context, GoRouterState state) => const Splash(),
        ),
        GoRoute(
          name: "home",
          path: '/home',
          builder: (BuildContext context, GoRouterState state) =>
              const HomePage(title: "Home Page"),
        ),
        GoRoute(
          name: 'jobs',
          path: '/jobs',
          builder: (BuildContext context, GoRouterState state) => JobsList(),
          routes: [
            GoRoute(
              name: "details",
              path: ':id',
              pageBuilder: (context, state) {
                final job = _fromJob(state.params['id']);
                return MaterialPage(
                  key: state.pageKey,
                  child: JobDetail(
                    job: job,
                  ),
                );
              },
            ),
          ],
        ),
        GoRoute(
            path: '/companies',
            builder: (BuildContext context, GoRouterState state) =>
                CompanysList(),
            routes: [
              GoRoute(
                name: "companyDetails",
                path: ':id',
                pageBuilder: (context, state) {
                  final company = _fromCompany(state.params['id']);
                  return MaterialPage(
                    key: state.pageKey,
                    child: CompanyDetail(
                      company: company,
                    ),
                  );
                },
              ),
            ]),
        GoRoute(
          name: "add_update",
          path: '/add_update',
          builder: (BuildContext context, GoRouterState state) =>
              const AddUpdateJob(),
        ),
        GoRoute(
          name: "admin",
          path: '/admin',
          builder: (BuildContext context, GoRouterState state) => const Admin(),
          routes: [
            GoRoute(
                name: "profile",
                path: 'profile',
                pageBuilder: (BuildContext context, GoRouterState state) {
                  return MaterialPage(
                    key: state.pageKey,
                    child: const Profile(),
                  );
                }),
            GoRoute(
                name: "manageuser",
                path: 'manageuser',
                pageBuilder: (BuildContext context, GoRouterState state) {
                  return MaterialPage(
                    key: state.pageKey,
                    child: const ManageUserpage(),
                  );
                }),
            GoRoute(
                name: "about",
                path: 'about',
                pageBuilder: (BuildContext context, GoRouterState state) {
                  return MaterialPage(
                    key: state.pageKey,
                    child: const Aboutpage(),
                  );
                }),
            GoRoute(
              name: "logout",
              path: 'logout',
              pageBuilder: (BuildContext context, GoRouterState state) {
                return MaterialPage(
                  key: state.pageKey,
                  child: const Logoutpage(),
                );
              },
            ),
          ],
        ),
        GoRoute(
          name: "login",
          path: '/login',
          builder: (BuildContext context, GoRouterState state) => LoginPage(),
        ),
        GoRoute(
          name: "register",
          path: '/register',
          builder: (BuildContext context, GoRouterState state) => Container(),
        ),
      ],
    );
  }

}